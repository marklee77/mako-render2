#!/usr/bin/python
# FIXME: meta style by object?

config_file_name = "~/.template_meta.yaml"

def render_mako(data, meta):
    from mako.template import Template
    from mako.lookup import TemplateLookup

    if meta['block']:
        data = '<%block name="' + meta['block'] + '">' + data + '</%block>'

    if meta['template']:
        data = '<%inherit file="' + meta['template'] + '" />' + data

    lookup = TemplateLookup(meta['template_dirs'])

    template = Template(data, lookup=lookup, 
    input_encoding=meta['input_encoding'], 
    output_encoding=meta['output_encoding'])

    return template.render(meta=meta)

def render_jinja2(data, meta):
    from jinja2 import Environment, FileSystemLoader

    if meta['block']:
        data = '{% block ' + meta['block'] + ' %}' + data + '{% endblock %}'

    if meta['template']:
        data = '{% extends "' + meta['template'] + '" %}' + data

    loader = FileSystemLoader(meta['template_dirs'], 
        encoding=meta['input_encoding'])

    env = Environment(loader=loader)

    template = env.from_string(data)

    return template.render(meta=meta).encode(meta['output_encoding'])

def main(argv=None):
    from os.path import isfile
    from sys import stdin, stdout

    from argparse import ArgumentParser

    from yaml import load as yload
    try:
        from yaml import CLoader as YLoader
    except ImportError:
        from yaml import Loader as YLoader

    import re
    from shlex import shlex

    engines = { 'mako' : render_mako, 'jinja2' : render_jinja2 }
    
    parser = ArgumentParser(description="Render a file using templates.")
    parser.add_argument('-i', '--inputfile', help='input file')
    parser.add_argument('-f', '--filters', action='append', default=[],
        help='list of filters to apply to input')
    parser.add_argument('-e', '--engine', default='mako', help='templating engine')
    parser.add_argument('-d', '--template_dirs', default='.', 
        help=': delimited template search path')
    parser.add_argument('-t', '--template', help='template to apply to input file')
    parser.add_argument('-b', '--block', help='template block to override')
    parser.add_argument('-m', '--metafile', action='append',
        help='metadata file in yaml format')
    parser.add_argument('-v', '--var', action='append', default=[],
        help='name:value pairs to be added to metadata')
    parser.add_argument('-o', '--outputfile', default='-', help='output file')
    parser.add_argument('-ienc', '--input_encoding', default='utf-8',
        help='input encoding')
    parser.add_argument('-oenc', '--output_encoding', default='utf-8',
        help='output encoding')

    args = parser.parse_args()

    meta = dict()
    metafiles = []
    
    if isfile(config_file_name):
        metafiles.append(config_file_name)

    if args.metafile:
        metafiles += args.metafile

    if metafiles:
        for metafile in args.metafile:
            if isfile(metafile):
                meta.update(yload(open(metafile, 'r'), Loader=YLoader))
            else:
                raise SystemExit("error: can't find metafile %s" % metafile)

    # FIXME: need a better way to compact yaml
    if args.var:
        for var in args.var:
            meta.update(yload(re.sub(":", ": ", var)))

    meta['inputfile'] = args.inputfile

    fsplit = shlex(",".join(args.filters), posix=True)
    fsplit.whitespace=","
    fsplit.whitespace_split = True
    meta['filters'] = list(fsplit)

    meta['engine'] = args.engine
    meta['template'] = args.template
    meta['block'] = args.block
    meta['template_dirs'] = args.template_dirs.split(":")
    meta['metafiles'] = args.metafile
    meta['vars'] = [tuple(v.split(':')) for v in args.var]
    meta['outputfile'] = args.outputfile
    meta['input_encoding'] = args.input_encoding
    meta['output_encoding'] = args.output_encoding
    
    if meta['inputfile'] == "-":
        fp = stdin
    elif isfile(meta['inputfile']):
        fp = open(meta['inputfile'], 'r')
    else:
        raise SystemExit("error: can't find %s" % args.inputfile)

    data = fp.read()

    # FIXME: apply filters function...
    for filter in meta['filters']:

        if filter in ['md', 'markdown']:
            import markdown
            md = markdown.Markdown(output_format='html5', extensions=['meta'])
            data = md.convert(data)
            for key in md.Meta:
                meta[key] = " ".join(md.Meta[key])
        else:
            raise SystemExit("error: filter %s not defined" % filter)

    if meta['outputfile'] == '-':
        out = stdout
    else:
        out = open(args.outputfile, 'w')

    out.write(engines[meta['engine']](data, meta))

if __name__ == "__main__":
    main()
