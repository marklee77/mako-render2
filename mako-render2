#!/usr/bin/python

def render(data, template_path, meta, input_encoding, output_encoding):
    from mako.template import Template
    from mako.lookup import TemplateLookup

    lookup = TemplateLookup(template_path)
    return Template(data, lookup=lookup, input_encoding=input_encoding,
        output_encoding=output_encoding).render(meta=meta)

def main(argv=None):
    from os.path import isfile
    from sys import stdin, stdout

    if argv is None:
        import sys
        argv = sys.argv

    from argparse import ArgumentParser

    parser = ArgumentParser(description="Render a Mako template.")
    parser.add_argument('-t', '--template', default='-', help='file to render')
    parser.add_argument('-tp', '--template_path', default='.', help='template search path')
    parser.add_argument('-m', '--meta', help='meta data file in yaml format')
    parser.add_argument('-i', '--inherit', 
        help='inheritence for static documents')
    parser.add_argument('-o', '--output', help='output file')
    parser.add_argument('-ienc', '--input_encoding', default='utf-8',
        help='input encoding')
    parser.add_argument('-oenc', '--output_encoding', default='utf-8',
        help='output encoding')

    args = parser.parse_args()

    if (args.template == "-"):
        fo = stdin
    else:
        filename = args.template
        if not isfile(filename):
            raise SystemExit("error: can't find %s" % filename)
        fo = open(filename)

    template_path = args.template_path.split(':')

    if args.meta:
        import yaml
        try:
            from yaml import CLoader as Loader
        except ImportError:
            from yaml import Loader
        metafile = open(args.meta, 'r')
        meta = yaml.load(metafile, Loader=Loader)
        metafile.close()
    else:
        meta = dict()
        
    if args.output:
        out = open(args.output, 'w')
    else:
        out = stdout
 
    meta['charset'] = args.output_encoding

    data = fo.read()

    if args.inherit:
        data = '<%inherit file="' + args.inherit + '" />' + data

    out.write(render(data, template_path, meta, args.input_encoding, args.output_encoding))

if __name__ == "__main__":
    main()
