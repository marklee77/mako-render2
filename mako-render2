#!/usr/bin/python

def render_mako(data, meta):
    from mako.template import Template
    from mako.lookup import TemplateLookup

    if 'extends' in meta and meta['extends']:
        data = '<%inherit file="' + meta['extends'] + '" />' + data

    lookup = TemplateLookup(meta['template_dirs'])

    template = Template(data, lookup=lookup, 
    input_encoding=meta['input_encoding'], 
    output_encoding=meta['output_encoding'])

    return template.render(meta=meta)

def render_jinja2(data, meta):
    from jinja2 import Environment, FileSystemLoader

    if 'extends' in meta and meta['extends']:
        data = '{% extends "' + meta['extends'] + '" %}' + data

    env = Environment(loader=FileSystemLoader(meta['template_dirs']))

    template = env.from_string(data)

    return template.render(meta=meta)

def main(argv=None):
    from os.path import isfile
    from sys import stdin, stdout

    from argparse import ArgumentParser

    engines = { 'mako' : render_mako, 'jinja2' : render_jinja2 }
    
    parser = ArgumentParser(description="Render a file using templates.")
    parser.add_argument('-i', '--inputfile', default='-', help='input file')
    parser.add_argument('-f', '--filters', action='append', default=[],
        help='list of filters to apply to input')
    parser.add_argument('-e', '--engine', default='mako', help='templating engine')
    parser.add_argument('-t', '--template', help='template to apply to input file')
    parser.add_argument('-d', '--template_dirs', default='.', 
        help=': delimited template search path')
    parser.add_argument('-m', '--metafile', action='append',
        help='metadata file in yaml format')
    parser.add_argument('-v', '--var', action='append', default=[],
        help='name:value pair to be added to metadata')
    parser.add_argument('-o', '--outputfile', default='-', help='output file')
    parser.add_argument('-ienc', '--input_encoding', default='utf-8',
        help='input encoding')
    parser.add_argument('-oenc', '--output_encoding', default='utf-8',
        help='output encoding')

    args = parser.parse_args()

    meta = dict()

    if args.metafile:
        from yaml import load as yload
        try:
            from yaml import CLoader as YLoader
        except ImportError:
            from yaml import Loader as YLoader
        for metafile in args.metafile:
            fp = open(metafile, 'r')
            meta.update(yload(fp, Loader=YLoader))
            fp.close()

    # FIXME: add fix for \:...
    if args.var:
        for pair in args.var:
            name, value = pair.split(':')
            meta[name] = value

    meta['inputfile'] = args.inputfile
    meta['filters'] = [f for l in args.filters for f in l.split(",")]
    meta['engine'] = args.engine
    meta['extends'] = args.template
    meta['template_dirs'] = args.template_dirs.split(":")
    meta['metafiles'] = args.metafile
    meta['vars'] = [tuple(v.split(':')) for v in args.var]
    meta['outputfile'] = args.outputfile
    meta['input_encoding'] = args.input_encoding
    meta['output_encoding'] = args.output_encoding
    
    if meta['inputfile'] == "-":
        fp = stdin
    elif isfile(meta['inputfile']):
        fp = open(meta['inputfile'])
    else:
        raise SystemExit("error: can't find %s" % args.inputfile)

    data = fp.read()

    for filter in meta['filters']:

        if filter in ['md', 'markdown']:
            import markdown
            md = markdown.Markdown(output_format='html5', extensions=['meta'])
            data = md.convert(data)
            for key in md.Meta:
                meta[key] = " ".join(md.Meta[key])

    if meta['outputfile'] == '-':
        out = stdout
    else:
        out = open(args.outputfile, 'w')

    out.write(engines[meta['engine']](data, meta))

if __name__ == "__main__":
    main()
